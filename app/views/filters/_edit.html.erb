<%= form_with model: form_params[:filter], local: false do |form| %>
  <% if form_params[:filter].errors.any? %>
    <div id="error_explanation">
      <h2>
        <%= pluralize(form_params[:filter].errors.count, "error") %> 
        prohibited this folder from being saved.
      </h2>

      <ul>
        <% form_params[:filter].errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
  <div class="layer">
    <div class="left">
      <%= form.label :folder_id %>
      <%= form.collection_select :folder_id,
                                 form_params[:folders].select { |f| f[:id] > 2 },
                                 :id,
                                 :name,
                                 value: form_params[:folder] %>
    </div>
  </div>
  <div class="layer">
    <div class="left"> 
      <%= form.label :name %>
      <%= form.text_field :name, value: form_params[:filter].name %>
    </div>
  </div>
  <div class="layer left">
    <div class="left">
      <%= form.label :execution_order %>
      <%= form.number_field :execution_order, 
                            value: form_params[:filter].execution_order %>
    </div>
  </div>
  <div class="layer left">
    <div class="left">
      <%= form.label :logic %>
      <%= form.text_field :logic, value: form_params[:filter].logic %>
    </div>
  </div>
  <div class="clarifier">
    To code the filter logic combine Ruby logic operators (&&, || and !) 
    with rule ids.<br>
    For example the code (2&&1&&!3)||4 will select for errors that match 
    the rule with id 2 and rule 1 but not rule 3, if that doesn't match
    then it tries to match with rule 4.
  </div>
  <div class="layer">
    <% unless [1, 2].include? form_params[:filter][:folder_id] %>
      <%= form.submit "Submit Changes" %>
    <% end %>
  </div>
<% end %>
